# Generated by Django 2.2.13 on 2020-06-15 05:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
    migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_teacher', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('Name', models.CharField(max_length=50, null=True)),
                ('Email', models.EmailField(max_length=254, null=True)),
                ('Department', models.CharField(choices=[('CSE', 'CSE'), ('IT', 'IT'), ('EE', 'EE'), ('ECE', 'ECE'), ('ME', 'ME'), ('CE', 'CE'), ('CH', 'CH'), ('BTECH COMMON', 'BTECH COMMON')], max_length=20)),
                ('Mobile', models.CharField(max_length=20)),
            ],
        ),
        
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('image', models.ImageField(default='static/ayurvedasite/images/no.png', upload_to='images/')),
                ('published_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Pdfbooks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=50)),
                ('year', models.CharField(choices=[('1st', '1st'), ('2nd', '2nd'), ('3rd', '3rd'), ('Final', 'Final')], default='1st', max_length=10)),
                ('branch', models.CharField(choices=[('CSE', 'CSE'), ('IT', 'IT'), ('EE', 'EE'), ('ECE', 'ECE'), ('ME', 'ME'), ('CE', 'CE'), ('CH', 'CH'), ('BTECH COMMON', 'BTECH COMMON')], default='BTECH COMMON', max_length=20)),
                ('author', models.CharField(max_length=50)),
                ('published_year', models.IntegerField(null=True)),
                ('pdf', models.FileField(upload_to='document/')),
                ('disliked', models.ManyToManyField(blank=True, related_name='pdfbooksdisliked', to=settings.AUTH_USER_MODEL)),
                ('liked', models.ManyToManyField(blank=True, related_name='pdfbooksliked', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Papers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=30)),
                ('branch', models.CharField(choices=[('CSE', 'CSE'), ('IT', 'IT'), ('EE', 'EE'), ('ECE', 'ECE'), ('ME', 'ME'), ('CE', 'CE'), ('CH', 'CH'), ('BTECH COMMON', 'BTECH COMMON')], default=0, max_length=10)),
                ('year', models.CharField(choices=[('1st', '1st'), ('2nd', '2nd'), ('3rd', '3rd'), ('Final', 'Final')], default='1st', max_length=10)),
                ('data', models.FileField(upload_to='document/')),
                ('Date_of_upload', models.DateTimeField(default=django.utils.timezone.now)),
                ('Type_of_paper', models.CharField(choices=[('EndSem', 'EndSem'), ('ClassTest', 'ClassTest')], default='EndSem', max_length=10)),
                ('disliked', models.ManyToManyField(blank=True, related_name='papersdisliked', to=settings.AUTH_USER_MODEL)),
                ('liked', models.ManyToManyField(blank=True, related_name='papersliked', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=50)),
                ('data', models.FileField(upload_to='document/')),
                ('Date_of_upload', models.DateTimeField(default=django.utils.timezone.now)),
                ('branch', models.CharField(choices=[('CSE', 'CSE'), ('IT', 'IT'), ('EE', 'EE'), ('ECE', 'ECE'), ('ME', 'ME'), ('CE', 'CE'), ('CH', 'CH'), ('BTECH COMMON', 'BTECH COMMON')], default=0, max_length=10)),
                ('year', models.CharField(choices=[('1st', '1st'), ('2nd', '2nd'), ('3rd', '3rd'), ('Final', 'Final')], default='1st', max_length=10)),
                ('disliked', models.ManyToManyField(blank=True, related_name='disliked', to=settings.AUTH_USER_MODEL)),
                ('liked', models.ManyToManyField(blank=True, related_name='liked', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Notes.Teacher')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(choices=[('upvote', 'upvote'), ('downvote', 'downvote')], default='upvote', max_length=10)),
                ('notes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes_like', to='Notes.Notes')),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='papers_like', to='Notes.Papers')),
                ('pdf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pdf_like', to='Notes.Pdfbooks')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('text', models.TextField(max_length=500)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved_answers', models.BooleanField(default=False)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='Notes.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('Name', models.CharField(max_length=50)),
                ('Email', models.EmailField(max_length=254, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_student', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('Year', models.CharField(choices=[('1st', '1st'), ('2nd', '2nd'), ('3rd', '3rd'), ('Final', 'Final')], max_length=10)),
                ('Branch', models.CharField(choices=[('CSE', 'CSE'), ('IT', 'IT'), ('EE', 'EE'), ('ECE', 'ECE'), ('ME', 'ME'), ('CE', 'CE'), ('CH', 'CH'), ('BTECH COMMON', 'BTECH COMMON')], default='BTECH COMMON', max_length=20)),
                ('liked', models.ManyToManyField(related_name='topic_liked', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
